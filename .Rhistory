plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none"),
width = 15, height = 10, dpi = 100)
if(params$view_html) {
plotly <- ggplotly(ur, dynamicTicks = TRUE, tooltip = c("text"))%>%
layout(yaxis = list(tickformat = "%"),
title = list(text = paste0(stri_wrap(titulo, 50),
'<br>',
'<sup>',
subtitulo,
'</sup>'),
y = 1.1),
hovermode = "x",
tickvalues ="",
showlegend = F,
annotations = list(x = 1, y = 1,
text = caption,
showarrow = F,
xref='paper',
yref='paper',
xanchor='right',
yanchor='auto',
xshift=0,
yshift=0,
font=list(size=15, color="red")))
saveWidgetFix(plotly,libdir = "graph_dependencies", selfcontained = F,
file="03_graficas/hogares_ingreso_param.html")
plotly
} else if(params$view_pdf ){
include_graphics(path ="03_graficas/hogares_ingreso_param.png", auto_pdf = T)
}
data_cono <- cuadros_OP%>%
filter(Pregunta %in% pregunta, str_detect(id, "1.")) %>%
mutate(Respuesta = (reorder(id, desc(id))),
fill = str_wrap(str_replace(Pregunta,
"Proporción de hogares en México",
"% de hogares"),10)
)
ur <-   ggplot(data_cono,
aes(x = str_wrap(Pregunta, 10),
y = value,
fill =fill,
label = Porcentaje,
text = text)) +
geom_col(width = 0.5, position = "stack") +
theme_minimal() +
ylim(0, 1.05) +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
x="",
y="")
ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none")
ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none")
pregunta <- c("Proporción de hogares en México que tiene al menos un miembro que trabaja", "Proporción de hogares en México en los que ya ninguno de sus miembros está trabajando")
titulo <- "Proporción de hogares en México según estado laboral"
subtitulo <- ""
data_cono <- cuadros_OP%>%
filter(Pregunta %in% pregunta, str_detect(id, "1.")) %>%
mutate(Respuesta = (reorder(id, desc(id))),
fill = str_wrap(str_replace(Pregunta,
"Proporción de hogares en México",
"% de hogares"),10)
)
ur <-   ggplot(data_cono,
aes(x = str_wrap(Pregunta, 10),
y = value,
fill =fill,
label = Porcentaje,
text = text)) +
geom_col(width = 0.5, position = "stack") +
theme_minimal() +
ylim(0, 1.05) +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
x="",
y="")
ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none")
ggsave("03_graficas/hogares_trabajo_param.pdf", plot = ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none"),
width = 15, height = 10, dpi = 100)
ur <-   ggplot(data_cono,
aes(x = str_wrap(Pregunta, 20),
y = value,
fill =fill,
label = Porcentaje,
text = text)) +
geom_col(width = 0.5, position = "stack") +
theme_minimal() +
ylim(0, 1.05) +
labs(title = str_wrap(titulo, 50),
subtitle = str_wrap(subtitulo, 50),
x="",
y="")
ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none")
ggsave("03_graficas/hogares_trabajo_param.pdf", plot = ur+
geom_label(size = 8)+
scale_y_percent(limits = c(0,(max(data_cono$value)+.1)))+
theme(plot.title = element_text(size = 35, face = "bold"),
plot.subtitle = element_text(size = 25),
plot.caption = element_text(size = 15),
panel.spacing.x = unit(3, "lines"),
axis.text.x = element_text(size = 25, vjust = 0.5),
axis.text.y = element_text(size = 15),
legend.position = "none"),
width = 15, height = 10, dpi = 100)
require(foreign, quietly = T)
require(DT, quietly = T)
library(kableExtra, quietly = T)
library(knitr, quietly = T)
require(xfun, quietly = T)
require(haven, quietly = T)
library(geojsonio, quietly = T)
require(rgdal, quietly = T)
require(readxl, quietly = T)
require(ggrepel, quietly = T)
require(stringi, quietly = T)
require(xlsx, quietly = T)
require(ggthemes, quietly = T)
require(lubridate, quietly = T)
require(leaflet, quietly = T)
require(plotly, quietly = T)
require(RColorBrewer, quietly = T)
require(hrbrthemes, quietly = T)
require(dplyr, quietly = T)
require(tidyverse, quietly = T)
require(htmlwidgets, quietly = T)
saveWidgetFix <- function (widget,file,...) {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir);
saveWidget(widget,file=file,...)
}
rm_accent <- function(str,pattern="all") {
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
cuadros_OP <- read_excel(paste0("01_datos/", "Cuadros_HTML2.xlsx"))
#cuadros_OP <- read_excel("~/synology_shared/Parametría/COVID_SEGUIMIENTO_MX/01_datos/Cuadros_HTML2.xlsx")
# Transformaciones ----
names(cuadros_OP)[10:47] <- paste0("r_", names(cuadros_OP)[10:47])
cuadros_OP <- cuadros_OP %>%
pivot_longer(cols = starts_with("r_"),
names_prefix = "r_",
names_to = "id",
values_to = "value")%>%
drop_na(value)%>%
mutate(
País = ifelse(
País=="USA", "EEUU", País
),
value = value/100,
id = ifelse(id=="Nivel", País, id),
text = paste0(stri_replace_first(id, regex = "[:digit:]+. ", replacement = ""), "\n", "Porcentaje: " ,round(value*100, 0), "%" , "\n", str_wrap(Pregunta, 25), "\nEncuestadora: ", Encuesta ),
) %>%
drop_na(tipo_encuesta) # QUITAR UNA VEZ QUE SE ACTUALICEN TODAS LAS FECHAS Y NOTAS METODOLÓGICAS
categorias <- unique(cuadros_OP$Categoría)
require(foreign, quietly = T)
require(DT, quietly = T)
library(kableExtra, quietly = T)
library(knitr, quietly = T)
require(xfun, quietly = T)
require(haven, quietly = T)
library(geojsonio, quietly = T)
require(rgdal, quietly = T)
require(readxl, quietly = T)
require(ggrepel, quietly = T)
require(stringi, quietly = T)
require(xlsx, quietly = T)
require(ggthemes, quietly = T)
require(lubridate, quietly = T)
require(leaflet, quietly = T)
require(plotly, quietly = T)
require(RColorBrewer, quietly = T)
require(hrbrthemes, quietly = T)
require(dplyr, quietly = T)
require(tidyverse, quietly = T)
require(htmlwidgets, quietly = T)
saveWidgetFix <- function (widget,file,...) {
## A wrapper to saveWidget which compensates for arguable BUG in
## saveWidget which requires `file` to be in current working
## directory.
wd<-getwd()
on.exit(setwd(wd))
outDir<-dirname(file)
file<-basename(file)
setwd(outDir);
saveWidget(widget,file=file,...)
}
rm_accent <- function(str,pattern="all") {
if(!is.character(str))
str <- as.character(str)
pattern <- unique(pattern)
if(any(pattern=="Ç"))
pattern[pattern=="Ç"] <- "ç"
symbols <- c(
acute = "áéíóúÁÉÍÓÚýÝ",
grave = "àèìòùÀÈÌÒÙ",
circunflex = "âêîôûÂÊÎÔÛ",
tilde = "ãõÃÕñÑ",
umlaut = "äëïöüÄËÏÖÜÿ",
cedil = "çÇ"
)
nudeSymbols <- c(
acute = "aeiouAEIOUyY",
grave = "aeiouAEIOU",
circunflex = "aeiouAEIOU",
tilde = "aoAOnN",
umlaut = "aeiouAEIOUy",
cedil = "cC"
)
accentTypes <- c("´","`","^","~","¨","ç")
if(any(c("all","al","a","todos","t","to","tod","todo")%in%pattern)) # opcao retirar todos
return(chartr(paste(symbols, collapse=""), paste(nudeSymbols, collapse=""), str))
for(i in which(accentTypes%in%pattern))
str <- chartr(symbols[i],nudeSymbols[i], str)
return(str)
}
cuadros_OP <- read_excel(paste0("01_datos/", "Cuadros_HTML2.xlsx"))
#cuadros_OP <- read_excel("~/synology_shared/Parametría/COVID_SEGUIMIENTO_MX/01_datos/Cuadros_HTML2.xlsx")
# Transformaciones ----
names(cuadros_OP)[10:47] <- paste0("r_", names(cuadros_OP)[10:47])
cuadros_OP <- cuadros_OP %>%
pivot_longer(cols = starts_with("r_"),
names_prefix = "r_",
names_to = "id",
values_to = "value")%>%
drop_na(value)%>%
mutate(
País = ifelse(
País=="USA", "EEUU", País
),
value = value/100,
id = ifelse(id=="Nivel", País, id),
text = paste0(stri_replace_first(id, regex = "[:digit:]+. ", replacement = ""), "\n", "Porcentaje: " ,round(value*100, 0), "%" , "\n", str_wrap(Pregunta, 25), "\nEncuestadora: ", Encuesta ),
) %>%
drop_na(tipo_encuesta) # QUITAR UNA VEZ QUE SE ACTUALICEN TODAS LAS FECHAS Y NOTAS METODOLÓGICAS
categorias <- unique(cuadros_OP$Categoría)
manejo_media <- cuadros_OP %>%
filter(Categoría=="Manejo Medios") %>%
filter(!str_detect(id,"99")) %>%
filter(!str_detect(País,"xico")) %>%
arrange(País) %>%
group_by(País) %>%
filter(
fecha==max(fecha)
) %>%
bind_rows(
cuadros_OP %>%
filter(Categoría=="Manejo Medios") %>%
filter(!str_detect(id,"99")) %>%
filter(str_detect(País,"xico")) %>%
filter(!tipo_encuesta=="En línea")
) %>%
arrange(País) %>%
mutate(
prop = round(value*100),
Porcentaje = paste0(round(value*100), "%")
)
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 15), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1) +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = c(
brewer.pal(n=9, "Blues")[2],
brewer.pal(n=9, "Blues")[4],
brewer.pal(n=9, "Blues")[6],
brewer.pal(n=9, "Blues")[8],
brewer.pal(n=9, "Blues")[9]
)) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
View(manejo_media)
View(cuadros_OP)
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "pdf_document",  output_file = "AnalisisParametria")
rmarkdown::render(input = "AnalisisParametria.Rmd",
output_format = "html_document", output_file = "index")
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "pdf_document",  output_file = "RedesSociales")
rmarkdown::render(input = "RedesSociales.Rmd",
output_format = "html_document", output_file = "RedesSociales")
rmarkdown::render(input = "OpinionPublica.Rmd",
output_format = "pdf_document",  output_file = "OpinionPublica")
rmarkdown::render(input = "OpinionPublica.Rmd",
output_format = "html_document", output_file = "OpinionPublica")
manejo_media <- cuadros_OP %>%
filter(Categoría=="Manejo Medios") %>%
filter(!str_detect(id,"99")) %>%
filter(!str_detect(País,"xico")) %>%
arrange(País) %>%
group_by(País) %>%
filter(
fecha==max(fecha)
) %>%
bind_rows(
cuadros_OP %>%
filter(Categoría=="Manejo Medios") %>%
filter(!str_detect(id,"99")) %>%
filter(str_detect(País,"xico")) %>%
filter(!tipo_encuesta=="En línea")
) %>%
arrange(País) %>%
mutate(
prop = round(value*100),
Porcentaje = paste0(round(value*100), "%")
)
length(levels(as.factor(manejo_media$Pregunta)))
View(manejo_media)
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 15), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1) +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = c(
brewer.pal(n=9, "Blues")[2],
brewer.pal(n=9, "Blues")[4],
brewer.pal(n=9, "Blues")[6],
brewer.pal(n=9, "Blues")[8],
brewer.pal(n=9, "Blues")[9]
)) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
rep("white", length(levels(as.factor(manejo_media$Pregunta))))
length(unique(manejo_media$id))
brewer.pal(n=length(unique(manejo_media$id)))
brewer.pal(n=length(unique(manejo_media$id)), "Blues")
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 15), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1) +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = brewer.pal(n=length(unique(manejo_media$id)), "Blues")) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 10), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1) +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = brewer.pal(n=length(unique(manejo_media$id)), "Blues")) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 10), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1, scales = "free") +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = brewer.pal(n=length(unique(manejo_media$id)), "Blues")) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
p <-
ggplot(manejo_media,
aes(x = str_wrap(id, 10), y = prop,
fill = id,
color = Pregunta,
label = Porcentaje)) +
geom_col(width = 0.5) +
facet_wrap(País ~ Encuesta, nrow = 1, scales = "free_x") +
theme_minimal() +
scale_color_manual("",
values = c(rep("white", length(levels(as.factor(manejo_media$Pregunta)))))) +
scale_fill_manual("",
values = brewer.pal(n=length(unique(manejo_media$id)), "Blues")) +
labs(x="",
y="%") +
theme(strip.text = element_text(size = 15),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 12),
legend.position = "none")
p
rmarkdown::render(input = "OpinionPublica.Rmd",
output_format = "pdf_document",  output_file = "OpinionPublica")
rmarkdown::render(input = "OpinionPublica.Rmd",
output_format = "html_document", output_file = "OpinionPublica")
